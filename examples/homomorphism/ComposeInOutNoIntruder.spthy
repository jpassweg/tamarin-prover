theory ComposeInOutNoIntruder
begin

builtins: homomorphic-encryption

rule GetVars:
  [ Fr(~x0), Fr(~x1) ]
  --[]->
  [ !Vars(~x0,~x1) ]

rule GetKey:
  [ Fr(~x2) ]
  --[]->
  [ !Key(~x2) ]

rule A:
  [ !Vars(x0,x1), !Key(x2) ]
  --[ Send(x0, x1, x2) ]->
  [ Out( hpair( henc(x0,x2), henc(x1,x2) ) ) ]

rule B:
  [ !Vars(x0,x1), !Key(x2)
  , In( henc(hpair(x0, x1), x2) ) ]
  --[ Receive(x0, x1, x2) ]->
  []

lemma Send_And_Received: exists-trace
  "Ex x0 x1 x2 #i #j. Send(x0, x1, x2) @i & Receive(x0, x1, x2) @j & not K(henc(x0,x2)) @j & not K(henc(x1,x2)) @j"

restriction Only_One_Send_With_Same_Vars: 
  "All x0 x1 x2 #i #j. Send(x0, x1, x2) @i & Send(x0, x1, x2) @j ==> #i = #j"

// NOTE: should not find example since we don't allow introder to know anything
restriction No_Adversial_Help:
  "All x #i. K(x) @i ==> F"

end