// NEEDHAM-SCHROEDER SYMMETRIC KEY PROTOCOL from the Cap Unification paper

theory NeedhamSchroederAlternativeProtocol
begin

/*
Alternative Protocol:
A->S: A, B, N_a
S->A: {N_a, B, K_ab}Kas
S->B: {K_ab,A}Kbs
B->A: {N_b}Kab
A->B: {succ(N_b)}Kab
*/

builtins: homomorphic-encryption
functions: succ/1

rule Client_Server_Keys:
    [ Fr(~key) ]
    --[]->
    [ SCKey($Server, $Client, ~key), CSKey($Client, $Server, ~key) ]

rule A_1:
    [ CSKey($A, $S, KAS)
    , Fr(~NA) ]
    --[]->
    [ A1Out(<<$A, $B>, ~NA>)
    , A_1_State($S, $A, $B, KAS, ~NA) ]

rule S_1:
    [ SCKey($S, $A, KAS)
    , SCKey($S, $B, KBS)
    , A1Out(<<$A, $B>, NA>)
    , Fr(~KAB) ]
    --[]->
    [ Out(henc(<<NA, $B>, ~KAB>, KAS))
    , Out(henc(<~KAB, $A>, KBS)) ]

rule A_2:
    [ A_1_State($S, $A, $B, KAS, ~NA)
    , In(henc(<<~NA, $B>, KAB>, KAS)) ]
    --[]->
    [ A_2_State($S, $A, $B, KAS, KAB) ]

rule B_1:
    [ CSKey($B, $S, KBS)
    , In(henc(<KAB, $A>, KBS))
    , Fr(~NB) ]
    --[]->
    [ B1Out(henc(~NB, KAB)) 
    , B_1_State($S, $A, $B, KBS, KAB, ~NB) ]

rule A_3:
    [ A_2_State($S, $A, $B, KAS, KAB)
    , B1Out(henc(NB, KAB)) ]
    --[ SecretKey($A, KAB)
      , Finished($A, $B, KAB) ]->
    [ A3Out(henc(succ(NB), KAB)) ]

rule B_2:
    [ B_1_State($S, $A, $B, KBS, KAB, ~NB)
    , A3Out(henc(succ(~NB), KAB)) ]
    --[ SecretKey($B, KAB)
      , Finished($B, $A, KAB) ]->
    []

lemma Executability_Lemma:
    exists-trace "Ex A B key #i #j. Finished(A, B, key) @i & Finished(B, A, key) @j & not (A = B)"

lemma Secret_Shared_Key: 
    "All agent key #i. SecretKey(agent, key) @ #i ==> (not (Ex #t. K(key) @ #t))"

end