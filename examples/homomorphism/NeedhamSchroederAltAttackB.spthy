// NEEDHAM-SCHROEDER SYMMETRIC KEY PROTOCOL from the cap unification paper [1]
// Implemented by Jonas Passweg
// Adapted by Sofia Giampietro
// [1]: Siva Anantharaman, Hai Lin, Christopher Lynch, Paliath Narendran,
//      and Michael Rusinowitch. Cap unification: Application to protocol
//      security modulo homomorphic encryption. In Proceedings of the 5th
//      ACM Symposium on Information, Computer and Communications Security,
//      ASIACCS ’10, page 192–203, New York, NY, USA, 2010. Association for
//      Computing Machinery.

theory NeedhamSchroederAlternativeProtocolAttackB
begin

/*
Alternative Protocol:
A->S: A, B, N_a
S->A: {N_a, B, K_ab}Kas
S->B: {K_ab,A}Kbs
B->A: {N_b}Kab
A->B: {succ(N_b)}Kab
*/

builtins: homomorphic-encryption
functions: succ/1

rule Client_Server_Keys:
    [ Fr(~key) ]
    --[]->
    [ SCKey($Server, $Client, ~key), CSKey($Client, $Server, ~key) ]

rule A_1:
    [ CSKey($A, $S, KAS)
    , Fr(~NA) ]
    --[]->
    [ Out(hpair(hpair($A, $B), ~NA))
    , A_1_State($S, $A, $B, KAS, ~NA) ]

rule S_1:
    [ SCKey($S, $A, KAS)
    , SCKey($S, $B, KBS)
    , In(hpair(hpair($A, $B), NA))
    , Fr(~KAB) ]
    --[]->
    [ Out(henc(hpair(hpair(NA, $B), ~KAB), KAS))
    , Out(henc(hpair(~KAB, $A), KBS)) ]

rule A_2:
    [ A_1_State($S, $A, $B, KAS, ~NA)
    , In(henc(hpair(hpair(~NA, $B), KAB), KAS)) ]
    --[]->
    [ A_2_State($S, $A, $B, KAS, KAB) ]

rule B_1:
    [ CSKey($B, $S, KBS)
    , In(henc(hpair(KAB, $A), KBS))
    , Fr(~NB) ]
    --[]->
    [ Out(henc(~NB, KAB)) 
    , B_1_State($S, $A, $B, KBS, KAB, ~NB) ]

rule A_3:
    [ A_2_State($S, $A, $B, KAS, KAB)
    , In(henc(NB, KAB)) ]
    --[ NotEqual(KAB, $A)
      , NotEqual(KAB, $B)
      , NotEqual(KAB, $S)
      , FinishedA($A, $B, KAB) ]->
    [ Out(henc(succ(NB), KAB)) ]

rule B_2:
    [ B_1_State($S, $A, $B, KBS, KAB, ~NB)
    , In(henc(succ(~NB), KAB)) ]
    --[ NotEqual(KAB, $A)
      , NotEqual(KAB, $B)
      , NotEqual(KAB, $S)
      , SecretKey($B, KAB)
      , FinishedB($B, $A, KAB) ]->
    []

restriction notEqual:
    "All a #t. NotEqual(a,a) @t ==> F"

lemma Executability_Lemma:
    exists-trace "Ex A B key #i #j. FinishedA(A, B, key) @i & FinishedB(B, A, key) @j & not (A = B)"

lemma Secret_Shared_Key: 
    "All agent key #i. SecretKey(agent, key) @ #i ==> (not (Ex #t. K(key) @ #t))"

end