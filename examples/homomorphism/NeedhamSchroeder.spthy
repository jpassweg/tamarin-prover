// NEEDHAM-SCHROEDER SYMMETRIC KEY PROTOCOL from the Cap Unification paper

theory NeedhamSchroeder
begin

builtins: homomorphic-encryption
functions: succ/1

rule Client_Server_Keys:
    [ Fr(~key) ]
    --[]->
    [ SCKey($Server, $Client, ~key), CSKey($Client, $Server, ~key) ]

rule A_1:
    [ CSKey($A, $S, KAS)
    , Fr(~NA) ]
    --[]->
    [ Out(<<$A, $B>, ~NA>)
    , A_1_State($S, $A, $B, KAS, ~NA) ]

rule S_1:
    [ SCKey($S, $A, KAS)
    , SCKey($S, $B, KBS)
    , In(<<$A, $B>, NA>)
    , Fr(~KAB) ]
    --[ Sent1($A, henc(~KAB, KBS)) 
      , Sent2($A, henc($A, KBS)) ]->
    [ Out(henc(<<<NA, $B>, ~KAB>, henc(<~KAB, $A>, KBS)>, KAS)) ]

rule A_2:
    [ A_1_State($S, $A, $B, KAS, ~NA)
    , In(henc(<<<~NA, $B>, KAB>, <SBMsg1, SBMsg2>>, KAS)) ]
    --[ Forwarded1($A, SBMsg1)
      , Forwarded2($A, SBMsg2) ]->
    [ Out(<SBMsg1, SBMsg2>)
    , A_2_State($S, $A, $B, KAS, KAB) ]

rule B_1:
    [ CSKey($B, $S, KBS)
    , In(henc(<KAB, $A>, KBS))
    , Fr(~NB) ]
    --[ Received1($A, henc(KAB, KBS))
      , Received2($A, henc($A, KBS)) 
      , NotEqual(KAB, $A) ]->
    [ Out(henc(~NB, KAB)) 
    , B_1_State($S, $A, $B, KBS, KAB, ~NB) ]

rule A_3:
    [ A_2_State($S, $A, $B, KAS, KAB)
    , In(henc(NB, KAB)) ]
    --[ NotEqual(KAB, $A)
      , NotEqual(KAB, $B)
      , NotEqual(KAB, $S)
      , SecretKey($A, KAB)
      , FinishedA($A, $B, KAB) ]->
    [ Out(henc(succ(NB), KAB)) ]

rule B_2:
    [ B_1_State($S, $A, $B, KBS, KAB, ~NB)
    , In(henc(succ(~NB), KAB)) ]
    --[ NotEqual(KAB, $A)
      , NotEqual(KAB, $B)
      , NotEqual(KAB, $S)
      , SecretKey($B, KAB)
      , FinishedB($B, $A, KAB) ]->
    []

restriction notEqual:
    "All a #t. NotEqual(a,a) @t ==> F"

lemma forwardmessage1 [sources]:
    "All $A m1 #i. Forwarded1($A, m1) @i ==> (
          (Ex #t. Sent1($A, m1) @t & (#t < #i)) 
        | (Ex key m2 m3 m4 m5 #t. K(<<<henc(m3,key), henc(m4,key)>, henc(m5,key)>, <henc(m1,key), henc(m2,key)>>) @t & (#t < #i))
    )"

lemma forwardmessage2 [sources]:
    "All $A m2 #i. Forwarded2($A, m2) @i ==> (
          (Ex $A KBS #t. Sent2($A, m2) @t & m2 = henc($A, KBS) & (#t < #i)) 
        | (Ex key m1 m3 m4 m5 #t. K(<<<henc(m3,key), henc(m4,key)>, henc(m5,key)>, <henc(m1,key), henc(m2,key)>>) @t & (#t < #i))
    )"

/*
lemma forwardmessage1 [sources]:
    "All m1 m2 #i. Forwarded1(m1) @i & Forwarded2(m2) ==> (
        (Ex #t. Sent1(m1, m2) @t & (#t < #i)) 
        | (Ex key m3 m4 m5 #t. K(<<<henc(m3,key), henc(m4,key)>, henc(m5,key)>, <henc(m1,key), henc(m2,key)>>) @t & (#t < #i))
    )"

lemma receivemessage1 [sources]:
    "All m1 m2 #i. Received(m1, m2) @i ==> (
        (Ex m1F m2F #t1 #t2. Sent(m1, m2F) @t1 & (#t1 < #i) & Sent(m1F, m2) @t2 & (#t2 < #i))  
    )"

lemma receivemessage2 [sources]:
    "All m1 m2 #i. Received(m1, m2) @i ==> (
        (Ex m1F m2F #t1 #t2. Forwarded(m1, m2F) @t1 & (#t1 < #i) & Forwarded(m1F, m2) @t2 & (#t2 < #i))  
    )"
*/

lemma Executability_Lemma:
    exists-trace "Ex A B key #i #j. FinishedA(A, B, key) @i & FinishedB(B, A, key) @j & not (A = B)"

lemma Secret_Shared_Key: 
    "All agent key #i. SecretKey(agent, key) @i ==> (not (Ex #t. K(key) @t))"

end