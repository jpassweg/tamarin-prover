// NEEDHAM-SCHROEDER SYMMETRIC KEY PROTOCOL from the cap unification paper [1]
// Implemented by Jonas Passweg
// [1]: Siva Anantharaman, Hai Lin, Christopher Lynch, Paliath Narendran,
//      and Michael Rusinowitch. Cap unification: Application to protocol
//      security modulo homomorphic encryption. In Proceedings of the 5th
//      ACM Symposium on Information, Computer and Communications Security,
//      ASIACCS ’10, page 192–203, New York, NY, USA, 2010. Association for
//      Computing Machinery.

theory NeedhamSchroeder
begin

builtins: homomorphic-encryption
functions: succ/1

rule Client_Server_Keys:
    [ Fr(~key) ]
    --[ SecretServerKey($Client, ~key) ]->
    [ SCKey($Server, $Client, ~key), CSKey($Client, $Server, ~key) ]

rule A_1:
    [ Fr(~NA) ]
    --[]->
    [ Out(hpair(hpair($A, $B), ~NA))
    , A_1_State($A, $B, ~NA) ]

rule S_1:
    [ SCKey($S, $A, KAS)
    , SCKey($S, $B, KBS)
    , In(hpair(hpair($A, $B), NA))
    , Fr(~KAB) ]
    --[ NotEqual($A, $B)
      , NotEqual($A, NA)
      , NotEqual($B, NA)
      , NotEqual($S, NA)
      , NotEqual(KAS, NA)
      , NotEqual(KBS, NA)
      , Sent($A, NA)
      , Sent($A, $B)
      , Sent($A, ~KAB)
      , Sent($A, henc(~KAB, KBS))
      , Sent($A, henc($A, KBS))
      , SentB($B, ~KAB)
      , SentB($B, $A) ]->
    [ Out(henc(hpair(hpair(hpair(NA, $B), ~KAB), henc(hpair(~KAB, $A), KBS)), KAS)) ]

rule A_2:
    [ A_1_State($A, $B, ~NA)
    , CSKey($A, $S, KAS)
    , In(henc(hpair(hpair(hpair(~NA, $B), KAB), hpair(SBMsg1, SBMsg2)), KAS)) ]
    --[ NotEqual($A, $B)
      , NotEqual(KAB, $S)
      , NotEqual(KAB, $A) 
      , NotEqual(KAB, $B)
      , NotEqual(KAB, KAS)
      , NotEqual(KAB, ~NA)
      , Received1($A, SBMsg1)
      , Received2($A, SBMsg2) ]->
    [ Out(hpair(SBMsg1, SBMsg2))
    , A_2_State($S, $A, $B, KAS, KAB) ]

rule B_1:
    [ CSKey($B, $S, KBS)
    , In(henc(hpair(KAB, $A), KBS))
    , Fr(~NB) ]
    --[ NotEqual(KAB, $A)
      , NotEqual($A, $B)
      , NotEqual($A, $S)
      , NotEqual($A, KBS)
      , NotEqual(KAB, $B)
      , NotEqual(KAB, $S)
      , NotEqual(KAB, KBS) ]->
    [ Out(henc(~NB, KAB)) 
    , B_1_State($S, $A, $B, KBS, KAB, ~NB) ]

rule A_3:
    [ A_2_State($S, $A, $B, KAS, KAB)
    , In(henc(NB, KAB)) ]
    --[ NotEqual(NB, $A)
      , NotEqual(NB, $B)
      , NotEqual(NB, $S)
      , NotEqual(NB, KAS)
      , NotEqual(NB, KAB)
      , SecretKey($A, KAB)
      , FinishedA($A, $B, KAB) ]->
    [ Out(henc(succ(NB), KAB)) ]

rule B_2:
    [ B_1_State($S, $A, $B, KBS, KAB, ~NB)
    , In(henc(succ(~NB), KAB)) ]
    --[ SecretKey($B, KAB)
      , FinishedB($B, $A, KAB) ]->
    []

restriction notEqual:
    "All a #t. NotEqual(a,a) @t ==> F"

lemma All_Received_From_Server [sources]:
    "(All $A m1 m2 #i. Received1($A, m1) @i & Received2($A, m2) @i ==>
        (
            Ex KAS #t1 #tIntr1 #tIntr2 #t2. 
                Sent($A, m1) @t1 & Sent($A, m2) @t1 
                & KU(henc(m1, KAS)) @tIntr1 & KU(henc(m2, KAS)) @tIntr2
                & SecretServerKey($A, KAS) @t2
                & (#t1 < #tIntr1) & (#t1 < #tIntr2) & (#t1 < #i)
                & (#tIntr1 < #i) & (#tIntr2 < #i)
                & (#t2 < #t1) & (#t2 < #i) 
            )
        | (
            Ex KAS KBS $B #t1 #tIntr1 #tIntr2 #tIntr3 #tIntr4 #t2 #t3. 
                SentB($A, m1) @t1 & SentB($A, m2) @t1
                & KU(henc(m1, KAS)) @tIntr1 & KU(henc(m2, KAS)) @tIntr2
                & SecretServerKey($A, KAS) @t2
                & KU(henc(henc(m1, KAS), KBS)) @tIntr3 & KU(henc(henc(m2, KAS), KBS)) @tIntr4
                & SecretServerKey($B, KBS) @t3
                & Sent($B, henc(m1, KAS)) @t1 & Sent($B, henc(m2, KAS)) @t1
                & (#t1 < #tIntr1) & (#t1 < #tIntr2) & (#t1 < #i) & (#t1 < #tIntr3) & (#t1 < #tIntr4)
                & (#tIntr1 < #i) & (#tIntr2 < #i) & (#tIntr3 < #i) & (#tIntr4 < #i)
                & (#t2 < #i) & (#t2 < #t1)
                & (#t3 < #i) & (#t3 < #t1) 
            )
        )"

lemma Executability_Lemma:
    exists-trace "Ex A B key #i #j. FinishedA(A, B, key) @i & FinishedB(B, A, key) @j & not (A = B)"

lemma Secret_Shared_Key: 
    "All agent key #i. SecretKey(agent, key) @i ==> (not (Ex #t. K(key) @t))"

end