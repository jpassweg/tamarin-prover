// NEEDHAM-SCHROEDER SYMMETRIC KEY PROTOCOL from the Cap Unification paper

theory NeedhamSchroeder
begin

builtins: homomorphic-encryption
functions: succ/1

rule Client_Server_Keys:
    [ Fr(~key) ]
    --[]->
    [ SCKey($Server, $Client, ~key), CSKey($Client, $Server, ~key) ]

rule A_1:
    [ CSKey($A, $S, KAS)
    , Fr(~NA) ]
    --[]->
    [ Out(<<$A, $B>, ~NA>)
    , A_1_State($S, $A, $B, KAS, ~NA) ]

rule S_1:
    [ SCKey($S, $A, KAS)
    , SCKey($S, $B, KBS)
    , In(<<$A, $B>, NA>)
    , Fr(~KAB) ]
    --[ NotEqual($A, $B)
      , NotEqual($A, NA)
      , NotEqual($B, NA)
      , NotEqual($S, NA)
      , NotEqual(KAS, NA)
      , NotEqual(KBS, NA)
      , SentToForward($S, $A, $B, ~KAB, henc(~KAB, KBS), henc($A, KBS))
      , Sent($S, $A, $B, henc(NA, KAS))
      , Sent($S, $A, $B, henc($B, KAS))
      , Sent($S, $A, $B, henc(~KAB, KAS))
      , Sent($S, $A, $B, henc(henc(~KAB, KBS), KAS))
      , Sent($S, $A, $B, henc(henc($A, KBS), KAS))
      , ServerUsedForRoleA($A) ]->
    [ Out(henc(<<<NA, $B>, ~KAB>, henc(<~KAB, $A>, KBS)>, KAS)) ]

rule A_2:
    [ A_1_State($S, $A, $B, KAS, ~NA)
    , In(henc(<<<~NA, $B>, KAB>, <SBMsg1, SBMsg2>>, KAS)) ]
    --[ NotEqual($A, $B)
      , NotEqual(KAB, $S)
      , NotEqual(KAB, $A) 
      , NotEqual(KAB, $B)
      , NotEqual(KAB, KAS)
      , NotEqual(KAB, ~NA)
      , Forwarded($A, SBMsg1, SBMsg2) ]->
    [ Out(<SBMsg1, SBMsg2>)
    , A_2_State($S, $A, $B, KAS, KAB) ]

rule B_1:
    [ CSKey($B, $S, KBS)
    , In(henc(<KAB, $A>, KBS))
    , Fr(~NB) ]
    --[ NotEqual(KAB, $A)
      , NotEqual($A, $B)
      , NotEqual($A, $S)
      , NotEqual($A, KBS)
      , NotEqual(KAB, $B)
      , NotEqual(KAB, $S)
      , NotEqual(KAB, KBS)
      , Received($B, $A, henc(KAB, KBS), henc($A, KBS)) ]->
    [ Out(henc(~NB, KAB)) 
    , B_1_State($S, $A, $B, KBS, KAB, ~NB) ]

rule A_3:
    [ A_2_State($S, $A, $B, KAS, KAB)
    , In(henc(NB, KAB)) ]
    --[ NotEqual(NB, $A)
      , NotEqual(NB, $B)
      , NotEqual(NB, $S)
      , NotEqual(NB, KAS)
      , NotEqual(NB, KAB)
      , SecretKey($A, KAB)
      , FinishedA($A, $B, KAB) ]->
    [ Out(henc(succ(NB), KAB)) ]

rule B_2:
    [ B_1_State($S, $A, $B, KBS, KAB, ~NB)
    , In(henc(succ(~NB), KAB)) ]
    --[ SecretKey($B, KAB)
      , FinishedB($B, $A, KAB) ]->
    []

restriction notEqual:
    "All a #t. NotEqual(a,a) @t ==> F"

lemma receiveForwardedMessage [sources]:
    "All $B $A m1 m2 #i. Received($B, $A, m1, m2) @i ==> (
          (Ex #t. Forwarded($A, m1, m2) @t & (#t < #i))
        | (Ex #t. ServerUsedForRoleA($B) @t & (#t < #i))
    )"

lemma Executability_Lemma:
    exists-trace "Ex A B key #i #j. FinishedA(A, B, key) @i & FinishedB(B, A, key) @j & not (A = B)"

lemma Secret_Shared_Key: 
    "All agent key #i. SecretKey(agent, key) @i ==> (not (Ex #t. K(key) @t))"

end