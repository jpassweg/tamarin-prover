theory ReverseNormalization
begin

builtins: homomorphic-encryption

rule GenKey:
  [ Fr(~k) ]
  --[]->
  [ !Key(~k) ]

rule SendMessage:
  [ Fr(~m1), Fr(~m2), !Key(k) ]
  --[ SecretS(<~m1, ~m2>) ]->
  [ Out( <henc(~m1, k), henc(~m2, k)> ) ]

rule ReceiveMessage:
  let secret = hdec(m, k) in
  [ !Key(k), In(m) ]
  --[ SecretR( secret ) ]->
  []

lemma SendAndReceive: exists-trace 
  "Ex m #i #j. SecretS(m) @i & SecretR(m) @j"

// TODO: also needs reverse normilization? can unification handle this

end